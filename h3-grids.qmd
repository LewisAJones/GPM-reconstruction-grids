---
title: H3 resolution comparison
format: 
  html:
    theme:
      light: flatly
      dark: darkly
    self-contained: true
---

```{r setup, include=FALSE}
# Set default options
knitr::opts_knit$set(root.dir = rprojroot::find_rstudio_root_file())
```

Load relevant libraries.

```{r libraries}
# h3 library
library(h3jsr)
# table package
library(knitr)
# spatial library
library(sf)
```

View the internal `h3jsr` information table.

```{r table}
kable(h3_info_table)
```

To get all cells in `h3jsr`, we start by getting the base parent resolution (res = 0). This returns all cell indexes at this resolution.

```{r parent}
res_0 <- get_res0()
res_0
```

From this, we can then request the child cells at various resolutions. Let's get the cell indexes at resolution 2, 3, and 4, which is approximately 274 km, 103 km, and 39 km spacings between cell centroids, respectively.

```{r child}
res_2 <- get_children(h3_address = res_0, res = 2)
res_3 <- get_children(h3_address = res_0, res = 3)
res_4 <- get_children(h3_address = res_0, res = 4)
```

This generates lists of length 122 (the number of parent cells) with each element of the list containing a vector of the cell indexes at the desired resolution. As such, we need to extract all centroids from the lists.

```{r unlist}
res_2 <- unlist(res_2)
res_3 <- unlist(res_3)
res_4 <- unlist(res_4)
```

We can then get the centroid coordinates for each cell of our grids.

```{r centroids}
# Resolution 0
# Get centroids
points_0 <- cell_to_point(h3_address = res_0, simple = TRUE)
# Extract coordinates from sf object
points_0 <- st_coordinates(points_0)
# Create data frame
res_0 <- data.frame(res = 0, h3_address = res_0,
                    lng = points_0[, "X"], lat = points_0[, "Y"])
# Resolution 2
# Get centroids
points_2 <- cell_to_point(h3_address = res_2, simple = TRUE)
# Extract coordinates from sf object
points_2 <- st_coordinates(points_2)
# Create data frame
res_2 <- data.frame(res = 2, h3_address = res_2,
                    lng = points_2[, "X"], lat = points_2[, "Y"])
# Resolution 3
# Get centroids
points_3 <- cell_to_point(h3_address = res_3, simple = TRUE)
# Extract coordinates from sf object
points_3 <- st_coordinates(points_3)
# Create data frame
res_3 <- data.frame(res = 3, h3_address = res_3,
                    lng = points_3[, "X"], lat = points_3[, "Y"])
# Resolution 4
# Get centroids
points_4 <- cell_to_point(h3_address = res_4, simple = TRUE)
# Extract coordinates from sf object
points_4 <- st_coordinates(points_4)
# Create data frame
res_4 <- data.frame(res = 4, h3_address = res_4,
                    lng = points_4[, "X"], lat = points_4[, "Y"])
```

A bit of housekeeping by sorting the dataframes by their h3 address.

```{r housekeeping}
res_0 <- res_0[order(res_0$h3_address), ]
res_2 <- res_2[order(res_2$h3_address), ]
res_3 <- res_3[order(res_3$h3_address), ]
res_4 <- res_4[order(res_4$h3_address), ]
```

Reducing file size by rounding off coordinates.

```{r filesize}
res_0[, c("lng", "lat")] <- round(res_0[, c("lng", "lat")], digits = 4)
res_2[, c("lng", "lat")] <- round(res_2[, c("lng", "lat")], digits = 4)
res_3[, c("lng", "lat")] <- round(res_3[, c("lng", "lat")], digits = 4)
res_4[, c("lng", "lat")] <- round(res_4[, c("lng", "lat")], digits = 4)
```

Save data.

```{r save}
write.csv(x = res_0, file = "./grids/H3/resolution_0.csv", row.names = FALSE)
write.csv(x = res_2, file = "./grids/H3/resolution_2.csv", row.names = FALSE)
write.csv(x = res_3, file = "./grids/H3/resolution_3.csv", row.names = FALSE)
write.csv(x = res_4, file = "./grids/H3/resolution_4.csv", row.names = FALSE)
```